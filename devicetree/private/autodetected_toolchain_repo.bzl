# Copyright (C) 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Auto-detected toolchain from host."""

load(":constants.bzl", "TOOLCHAIN_TOOLS")

visibility("//devicetree/...")

def _autodetected_toolchain_repo_impl(repository_ctx):
    snippet = ""
    for tool_name in TOOLCHAIN_TOOLS:
        tool_path = repository_ctx.which(tool_name)
        if tool_path:
            repository_ctx.symlink(tool_path, tool_name)
            snippet += """\
    {tool_name} = {repr_tool_name},
""".format(
                tool_name = tool_name,
                repr_tool_name = repr(tool_name),
            )
        else:
            snippet += """\
    {tool_name} = None, # Can't find {tool_name} on host.
""".format(
                tool_name = tool_name,
            )

    build_content = """\
# Generated by devicetree/private/autodetected_toolchain_repo.bzl

load("@rules_devicetree//devicetree:toolchain.bzl", "devicetree_toolchain")
load(":fake_toolchain.bzl", "fake_toolchain")

devicetree_toolchain(
    name = "devicetree_toolchain",
{snippet}
    visibility = ["//visibility:private"],
)
""".format(
        snippet = snippet,
    )

    build_content += """\

config_setting(
    name = "is_autodetecting_toolchain",
    flag_values = {"@rules_devicetree//devicetree:autodetect_toolchain": "1"},
    visibility = ["//visibility:private"],
)

toolchain(
    name = "real_autodetected_toolchain",
    toolchain = ":devicetree_toolchain",
    toolchain_type = "@rules_devicetree//devicetree:toolchain_type",
    visibility = ["//visibility:private"],
)

toolchain_type(
    name = "fake_toolchain_type",
    visibility = ["//visibility:private"],
)

fake_toolchain(
    name = "fake_toolchain",
    visibility = ["//visibility:private"],
)

alias(
    name = "autodetected_toolchain",
    actual = select({
        ":is_autodetecting_toolchain": ":real_autodetected_toolchain",
        "//conditions:default": ":fake_toolchain",
    }),
    visibility = ["//visibility:private"],
)
"""

    repository_ctx.file("BUILD.bazel", build_content)

    repository_ctx.file("fake_toolchain.bzl", """\
visibility("private")

def _fake_toolchain_impl(_ctx):
    return [
        DefaultInfo(),
        platform_common.ToolchainInfo(),
    ]

fake_toolchain = rule(
    implementation = _fake_toolchain_impl,
)
""")

    repository_ctx.file("REPO.bazel", "")

autodetected_toolchain_repo = repository_rule(
    implementation = _autodetected_toolchain_repo_impl,
)
